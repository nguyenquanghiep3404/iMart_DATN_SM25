<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\FlashSale;
use App\Models\ProductVariant;
use App\Models\FlashSaleProduct;

class FlashSaleController extends Controller
{
    public function index()
    {
        // L·∫•y t·∫•t c·∫£ chi·∫øn d·ªãch Flash Sale, k√®m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√† c√°c khung gi·ªù
        $flashSales = FlashSale::withCount('flashSaleProducts')
            ->with('flashSaleTimeSlots')
            ->latest()
            ->get();

        return view('admin.flash_sales.index', compact('flashSales'));
    }

    // Hi·ªÉn th·ªã form t·∫°o Flash Sale m·ªõi
    public function create()
    {
        return view('admin.flash_sales.create');
    }
    // L∆∞u Flash Sale m·ªõi
    public function store(Request $request)
    {
        $messages = [
    'name.required' => 'Vui l√≤ng nh·∫≠p t√™n chi·∫øn d·ªãch.',
    'slug.required' => 'Vui l√≤ng nh·∫≠p slug.',
    'slug.unique' => 'Slug ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn slug kh√°c.',
    'start_time.required' => 'Vui l√≤ng ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu.',
    'start_time.date' => 'Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá.',
    'end_time.required' => 'Vui l√≤ng ch·ªçn th·ªùi gian k·∫øt th√∫c.',
    'end_time.date' => 'Th·ªùi gian k·∫øt th√∫c kh√¥ng h·ª£p l·ªá.',
    'end_time.after' => 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.',
    'status.in' => 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.',
    'time_slots.array' => 'Khung gi·ªù kh√¥ng h·ª£p l·ªá.',
    'time_slots.*.start_time.date_format' => 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM.',
    'time_slots.*.end_time.date_format' => 'Th·ªùi gian k·∫øt th√∫c ph·∫£i ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM.',
    'time_slots.*.end_time.after' => 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa c√πng khung gi·ªù.',
];


        $validated = $request->validate([
    'name' => 'required|string',
    'slug' => 'required|unique:flash_sales,slug',
    'start_time' => 'required|date',
    'end_time' => 'required|date|after:start_time',
    'banner_image_url' => 'nullable|string',
    'status' => 'in:scheduled,active,finished,inactive',
    'time_slots' => 'nullable|array',
    'time_slots.*.start_time' => 'nullable|date_format:H:i',
    'time_slots.*.end_time' => [
        'nullable',
        'date_format:H:i',
        function ($attribute, $value, $fail) use ($request) {
            // L·∫•y index c·ªßa ph·∫ßn t·ª≠ hi·ªán t·∫°i
            if (preg_match('/time_slots\.(\d+)\.end_time/', $attribute, $matches)) {
                $index = $matches[1];
                $start = $request->input("time_slots.$index.start_time");

                if ($start && $value && strtotime($value) <= strtotime($start)) {
                    $fail('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa c√πng khung gi·ªù.');
                }
            }
        },
    ],
], $messages);


        // T·∫°o Flash Sale
        $flashSale = FlashSale::create([
            'name' => $validated['name'],
            'slug' => $validated['slug'],
            'start_time' => $validated['start_time'],
            'end_time' => $validated['end_time'],
            'banner_image_url' => $validated['banner_image_url'] ?? null,
            'status' => $validated['status'],
        ]);

        // L∆∞u c√°c khung gi·ªù
        foreach ($validated['time_slots'] as $slot) {
            $flashSale->flashSaleTimeSlots()->create([
                'start_time' => $slot['start_time'],
                'end_time' => $slot['end_time'],
            ]);
        }

        return redirect()->route('admin.flash-sales.index')->with('success', 'T·∫°o Flash Sale th√†nh c√¥ng!');
    }


    // Hi·ªÉn th·ªã form ch·ªânh s·ª≠a Flash Sale
    public function edit(FlashSale $flashSale)
    {
        $variants = ProductVariant::with('product')->get();
        $flashSaleProducts = $flashSale->products()->with('variant.product')->get();

        return view('admin.flash_sales.edit', compact('flashSale', 'variants', 'flashSaleProducts'));
    }
    // C·∫≠p nh·∫≠t Flash Sale
    public function update(Request $request, FlashSale $flashSale)
    {
        $validated = $request->validate([
            'name' => 'required|string',
            'slug' => 'required|unique:flash_sales,slug,' . $flashSale->id,
            'start_time' => 'required|date',
            'end_time' => 'required|date|after:start_time',
            'time_slot' => 'nullable|string',
            'banner_image_url' => 'nullable|string',
            'status' => 'in:scheduled,active,finished,inactive',
        ]);

        $flashSale->update($validated);

        return redirect()->route('admin.flash-sales.index')->with('success', 'C·∫≠p nh·∫≠t Flash Sale th√†nh c√¥ng!');
    }
    // Xo√° Flash Sale
    public function destroy(FlashSale $flashSale)
    {
        $flashSale->delete();
        return back()->with('success', 'Xo√° Flash Sale th√†nh c√¥ng!');
    }
    // Hi·ªÉn th·ªã chi ti·∫øt Flash Sale
    public function show(FlashSale $flashSale)
    {
        $flashSale->load('flashSaleTimeSlots', 'products.variant.product');
        

        $variants = ProductVariant::with('product')
            ->whereHas('product', function ($query) {
                $query->where('type', '!=', 'simple'); // ch·ªâ l·∫•y product kh√°c simple
            })
            ->orderBy('created_at', 'desc')
            ->paginate(15);


        return view('admin.flash_sales.show', compact('flashSale', 'variants'));
    }
    // Th√™m khung gi·ªù cho Flash Sale
    public function addTimeSlot(Request $request, FlashSale $flashSale)
    {
        $request->validate([
            'start_time' => 'required|date_format:H:i',
            'end_time' => 'required|date_format:H:i|after:start_time',
            'label' => 'nullable|string',
            'total_quantity_limit' => 'nullable|integer|min:0',
            'sort_order' => 'nullable|integer|min:0',
            'date' => 'nullable|date',
        ]);

        $flashSale->flashSaleTimeSlots()->create([
            'start_time' => $request->start_time,
            'end_time' => $request->end_time,
            'label' => $request->label,
            'total_quantity_limit' => $request->total_quantity_limit,
            'sort_order' => $request->sort_order ?? 0,
            'date' => $request->date,
            'status' => true,
        ]);

        return back()->with('success', 'Th√™m khung gi·ªù th√†nh c√¥ng!');
    }


    // G√°n s·∫£n ph·∫©m v√†o Flash Sale
    public function attachProduct(Request $request, FlashSale $flashSale)
    {
        
        $request->validate([
            'product_variant_id' => 'required|exists:product_variants,id',
            'flash_price' => 'required|numeric|min:0',
            'quantity_limit' => 'required|integer|min:1',
            'flash_sale_time_slot_id' => 'nullable|exists:flash_sale_time_slots,id',

        ]);

        // üîç Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong chi·∫øn d·ªãch
        $exists = $flashSale->products()
            ->where('product_variant_id', $request->product_variant_id)
            ->exists();

        if ($exists) {
            // ‚ö†Ô∏è Tr·∫£ v·ªÅ v·ªõi th√¥ng b√°o l·ªói th√¢n thi·ªán
            return back()->with('error', 'S·∫£n ph·∫©m n√†y ƒë√£ c√≥ trong chi·∫øn d·ªãch.');
        }

        // ‚úÖ N·∫øu ch∆∞a t·ªìn t·∫°i th√¨ th√™m m·ªõi
        $flashSale->products()->create([
            'product_variant_id' => $request->product_variant_id,
            'flash_price' => $request->flash_price,
            'quantity_limit' => $request->quantity_limit,
            'flash_sale_time_slot_id' => $request->flash_sale_time_slot_id, // <--- th√™m d√≤ng n√†y
        ]);


        return back()->with('success', 'Th√™m s·∫£n ph·∫©m v√†o Flash Sale th√†nh c√¥ng!');
    }


    // Xo√° s·∫£n ph·∫©m kh·ªèi Flash Sale
    public function detachProduct(FlashSale $flashSale, FlashSaleProduct $product)
    {
        if ($product->flash_sale_id !== $flashSale->id) {
            abort(403);
        }

        $product->delete();

        return back()->with('success', 'Xo√° s·∫£n ph·∫©m kh·ªèi Flash Sale th√†nh c√¥ng!');
    }

    public function updateProduct(Request $request, FlashSale $flashSale, $flashProductId)
    {
        // Validate input
        $request->validate([
            'flash_price' => 'required|numeric|min:0',
            'quantity_limit' => 'required|integer|min:1',
            'flash_sale_time_slot_id' => 'nullable|exists:flash_sale_time_slots,id',
        ]);

        // Find the FlashSaleProduct record
        $flashProduct = $flashSale->products()->findOrFail($flashProductId);

        // Update the record
        $flashProduct->update([
            'flash_price' => $request->flash_price,
            'quantity_limit' => $request->quantity_limit,
            'flash_sale_time_slot_id' => $request->flash_sale_time_slot_id ?: null,
        ]);

        // Redirect back with success message
        return redirect()->back()->with('success', 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
    }
}
