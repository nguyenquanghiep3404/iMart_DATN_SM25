
<div class="image-gallery">
    <div id="main-image-container" class="group rounded-lg border border-gray-200 relative cursor-pointer">
        <img id="mainImage" src="https://placehold.co/600x600/f0f0f0/333?text=iPhone+15+Pro"
            alt="iPhone 15 Pro Max - Ảnh chính" class="w-full h-auto object-cover rounded-lg">

        <!-- Prev Button -->
        <button id="gallery-prev-btn"
            class="absolute left-3 top-1/2 -translate-y-1/2 bg-white/70 p-2 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity z-10">
            <svg class="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
        </button>

        <!-- Next Button -->
        <button id="gallery-next-btn"
            class="absolute right-3 top-1/2 -translate-y-1/2 bg-white/70 p-2 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity z-10">
            <svg class="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
        </button>
    </div>
    <div id="main-thumbnails" class="grid grid-cols-5 gap-2 mt-4">
        <!-- Thumbnails will be generated by JS -->
    </div>
</div>
@php
    $initialImages = [];
    if ($defaultVariant && $defaultVariant->images->count()) {
        $initialImages = $defaultVariant->images->map(fn($img) => Storage::url($img->path))->toArray();
    } elseif ($product->coverImage) {
        $initialImages[] = Storage::url($product->coverImage->path);
    }
    foreach ($product->galleryImages as $galleryImage) {
        $initialImages[] = Storage::url($galleryImage->path);
    }
    $initialImages = array_unique($initialImages);
@endphp

<script>
    const initialImages = @json($initialImages);
    console.log("Initial Images: ", @json($initialImages));
    const variantData = @json($variantData);
    const attributeOrder = @json($attributeOrder);

    let galleryImages = [...initialImages];
    let currentImageIndex = 0;

    document.addEventListener('DOMContentLoaded', function() {
        const mainImage = document.getElementById('mainImage');
        const mainThumbnails = document.getElementById('main-thumbnails');
        const prevBtn = document.getElementById('gallery-prev-btn');
        const nextBtn = document.getElementById('gallery-next-btn');

        function renderGallery(images) {
            galleryImages = images;
            currentImageIndex = 0;
            renderMainImage();
            renderThumbnails();
        }

        function renderMainImage() {
            mainImage.src = galleryImages[currentImageIndex];
            highlightSelectedThumb();
        }

        function renderThumbnails() {
            mainThumbnails.innerHTML = '';
            galleryImages.forEach((img, idx) => {
                const thumb = document.createElement('img');
                thumb.src = img;
                thumb.className =
                    `rounded border cursor-pointer object-cover w-full h-auto ${idx === currentImageIndex ? 'border-blue-500' : 'border-gray-200'}`;
                thumb.addEventListener('click', () => {
                    currentImageIndex = idx;
                    renderMainImage();
                });
                mainThumbnails.appendChild(thumb);
            });
        }

        function highlightSelectedThumb() {
            const thumbs = mainThumbnails.querySelectorAll('img');
            thumbs.forEach((thumb, idx) => {
                thumb.classList.toggle('border-blue-500', idx === currentImageIndex);
                thumb.classList.toggle('border-gray-200', idx !== currentImageIndex);
            });
        }

        prevBtn.addEventListener('click', () => {
            currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
            renderMainImage();
        });

        nextBtn.addEventListener('click', () => {
            currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
            renderMainImage();
        });

        // Variant selection
        window.updateGalleryFromSelection = function(variantKey) {
            const variant = variantData[variantKey];
            if (!variant) return;

            let images = [];
            if (variant.images && variant.images.length > 0) {
                if (variant.primary_image_id && variant.image) {
                    images = [variant.image, ...variant.images.filter(img => img !== variant.image)];
                } else {
                    images = variant.images;
                }
            } else {
                images = initialImages;
            }
            renderGallery(images);
        };

        // Khi load lần đầu
        function getSelectedVariantKey() {
            return attributeOrder.map(attr => {
                const input = document.querySelector(`input[data-attr-name="${attr}"]:checked`);
                return input ? input.value : '';
            }).join('_');
        }

        function ensureAllAttributesChecked() {
            attributeOrder.forEach(attr => {
                const checked = document.querySelector(`input[data-attr-name="${attr}"]:checked`);
                if (!checked) {
                    const first = document.querySelector(`input[data-attr-name="${attr}"]`);
                    if (first) first.checked = true;
                }
            });
        }

        window.addEventListener('load', () => {
            ensureAllAttributesChecked();
            const defaultKey = getSelectedVariantKey();
            if (defaultKey) window.updateGalleryFromSelection(defaultKey);
            else renderGallery(initialImages);
        });
    });
</script>
